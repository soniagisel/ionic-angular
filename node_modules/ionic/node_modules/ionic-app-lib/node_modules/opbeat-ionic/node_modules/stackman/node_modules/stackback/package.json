{
  "_args": [
    [
      "stackback@https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
      "/Users/Sonia/Desktop/ionic-angular/node_modules/ionic/node_modules/ionic-app-lib/node_modules/opbeat-ionic/node_modules/stackman"
    ]
  ],
  "_from": "stackback@0.0.2",
  "_id": "stackback@0.0.2",
  "_inCache": true,
  "_location": "/ionic/ionic-app-lib/opbeat-ionic/stackman/stackback",
  "_phantomChildren": {},
  "_requested": {
    "name": "stackback",
    "raw": "stackback@https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
    "rawSpec": "https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ionic/ionic-app-lib/opbeat-ionic/stackman"
  ],
  "_resolved": "https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
  "_shasum": "1ac8a0d9483848d1695e418b6d031a3c3ce68e3b",
  "_shrinkwrap": null,
  "_spec": "stackback@https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
  "_where": "/Users/Sonia/Desktop/ionic-angular/node_modules/ionic/node_modules/ionic-app-lib/node_modules/opbeat-ionic/node_modules/stackman",
  "author": {
    "email": "shtylman@gmail.com",
    "name": "Roman Shtylman"
  },
  "bugs": {
    "url": "https://github.com/shtylman/node-stackback/issues"
  },
  "dependencies": {},
  "description": "return list of CallSite objects from a captured stacktrace",
  "devDependencies": {
    "mocha": "~1.6.0"
  },
  "homepage": "https://github.com/shtylman/node-stackback#readme",
  "keywords": [
    "stack",
    "stacktrace",
    "trace"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "stackback",
  "optionalDependencies": {},
  "readme": "# stackback\n\nReturns an array of CallSite objects for a captured stacktrace. Useful if you want to access the frame for an error object.\n\n## use\n\n```javascript\nvar stackback = require('stackback');\n\n// error generated from somewhere\nvar err = new Error('some sample error');\n\n// stack is an array of CallSite objects\nvar stack = stackback(err);\n```\n\n## CallSite object\n\nFrom the [V8 StackTrace API](https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi)\n\nThe structured stack trace is an Array of CallSite objects, each of which represents a stack frame. A CallSite object defines the following methods\n\ngetThis: returns the value of this  \ngetTypeName: returns the type of this as a string. This is the name of the function stored in the constructor field of this, if available, otherwise the object's [[Class]] internal property.  \ngetFunction: returns the current function  \ngetFunctionName: returns the name of the current function, typically its name property. If a name property is not available an attempt will be made to try to infer a name from the function's context.  \ngetMethodName: returns the name of the property of this or one of its prototypes that holds the current function  \ngetFileName: if this function was defined in a script returns the name of the script  \ngetLineNumber: if this function was defined in a script returns the current line number  \ngetColumnNumber: if this function was defined in a script returns the current column number  \ngetEvalOrigin: if this function was created using a call to eval returns a CallSite object representing the location where eval was called  \nisToplevel: is this a toplevel invocation, that is, is this the global object?  \nisEval: does this call take place in code defined by a call to eval?  \nisNative: is this call in native V8 code?  \nisConstructor: is this a constructor call?  \n\n## install\n\n```shell\nnpm install stackback\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/shtylman/node-stackback.git"
  },
  "scripts": {
    "test": "mocha --ui qunit"
  },
  "version": "0.0.2"
}
